%{
#include <stdio.h>
#include<string.h>
void fail();
int noOfOperands = 0;
int noOfOperators = 0;
char operands[10][10];
char operators[10][10];
int valid = 0;
%}

%%

"(" valid++;
")"  { valid--; 
         if(valid<0) fail(); }
"+"|"*" { strcpy(operators[noOfOperators], yytext); noOfOperators++;}
[0-9]+ { strcpy(operands[noOfOperands], yytext); noOfOperands++;}
[^+*]"("[^0-9] fail();
[+*]")" fail();
%%

int  main()
{
	int i=0;
	printf("Enter a Mathematical Expression and press ctrl+d for output\n");
	yylex();
	printf("The number of operators are : %d\n The number of operands are : %d\n", noOfOperators, noOfOperands);
	if(valid==0 && noOfOperands-noOfOperators==1)
           {
		printf("Expression is valid \n");
		printf("The Operands are : \n");
		for(i=0;i<noOfOperands;i++) printf("%s\n",operands[i]);
		printf("The Operators are : \n");
		for(i=0;i<noOfOperators;i++) printf("%s\n",operators[i]);
	}
	else
           {
		printf("Invalid Expression \n");
	}
	return 0;

}

void fail()
{
	printf("The Expression is Invalid \n");
	exit(0);
}


Lex Part:
gedit lab1b.l

%{
#include "y.tab.h"
#include <stdlib.h>
extern int yylval;
%}

%%
[0-9]+ {yylval=atoi(yytext);
	return NUM;}
\n return yytext[0];
. {return yytext[0];}


Yacc Part
gedit lab1b.y

%{
#include<stdio.h>
int valid=1;
%}
%token NUM
%left '+' ‘-‘
%right ‘*’ '/'

%%

Stmt: expr '\n' {if(valid)
		{ printf("Result=%d\n",$$);}
          }
expr: expr '+' expr { $$=$1+$3;}
        | expr '-' expr { $$=$1-$3;}
        | expr '*' expr { $$=$1*$3;}
        | expr '/' expr { if($3==0) 
                           { valid=0;printf("Divide by zero error\n"); }
			else
			$$=$1/$3;}
    | '(' expr ')'  { $$=$2;}
    |  NUM {$$=$1;}
    ;
%%

void main()
{
	printf("Enter an Arithmetic Exression:\n");
	yyparse();
	if(valid==1)
		printf("Expression is valid\n");
}

int yyerror()
{
	printf("Invalid Expression\n");
	exit(0);
}	



//[root@localhost ~]# lex lab1b.l
//[root@localhost ~]# yacc -d lab1b.y
//[root@localhost ~]# cc lex.yy.c y.tab.c -ll
//[root@localhost ~]#./a.out

